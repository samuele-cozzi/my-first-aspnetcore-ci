# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  unittest_prj: 'source/FooApi.unittest'

steps:
  
  - script: dotnet restore $(unittest_prj)
    displayName: 'Restore'
  
  - script: dotnet build $(unittest_prj)
    displayName: 'Build'
  
    #- script: dotnet test $(unittest_prj) --logger trx --collect "Code coverage"
  - script: dotnet test $(unittest_prj) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
    displayName: 'Unit test with coverage'
  
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
  
  - task: PublishCodeCoverageResults@1
    displayName: 'publish coverage results'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '**/coverage.cobertura.xml'

  - script: |
      # build_api
      docker login -u samuelecozzi -p $(docker_repo_pwd)
      docker build --pull -t $(docker_image):build ./source
      #rename the previuos build
      docker tag $(docker_image):build $(docker_image):v$(Build.BuildId)
      docker push $(docker_image):v$(Build.BuildId)
      #tag last build
      docker tag $(docker_image):build $(docker_image):latest
      docker push $(docker_image):latest
      #- exit 0

      # # build_api
      docker login -u samuelecozzi -p $(docker_repo_pwd)
      docker build --pull -t $(docker_image_test):build ./source
      #rename the previuos build
      docker tag $(docker_image_test):build $(docker_image_test):v$(Build.BuildId)
      docker push $(docker_image_test):v$(Build.BuildId)
      #tag last build
      docker tag $(docker_image_test):build $(docker_image_test):latest
      docker push $(docker_image):latest
      # #- exit 0

  - task: PublishBuildArtifacts@1
    displayName: 'publish yaml folder as an artifact'
    inputs:
      artifactName: 'yaml'
      pathToPublish: 'yaml'

